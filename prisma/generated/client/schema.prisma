generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATE_DATABASE_URL")
}

model User {
  id                    String             @id @unique
  role                  UserRole           @default(USER)
  credits               Decimal            @default(3) @db.Decimal(10, 2)
  resumeJobTitle        String?
  resumeSkills          String?
  resumeExperience      String?
  resumeEducation       String?
  resumeAchievements    String?
  resumeFileUrl         String?
  jobSearchStage        String?
  linkedinUrl           String?
  acceptedTermsAt       DateTime?
  acceptedPrivacyAt     DateTime?
  dataRetentionOverride Boolean?           @default(false)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  premiumExpiresAt      DateTime?
  premiumSubscriptionId String?            @unique
  stripeCustomerId      String?            @unique
  isPremium             Boolean            @default(false)
  email                 String?            @unique
  image                 String?
  name                  String?
  feedbacks             Feedback[]
  interviewSessions     InterviewSession[]
  usageEvents           UsageEvent[]
}

model InterviewSession {
  id              String       @id
  userId          String
  jobTitle        String
  resumeSnapshot  Json?
  company         String?
  interviewType   String?
  jdContext       String?
  webrtcSessionId String?      @unique
  openaiSessionId String?      @unique
  fallbackMode    Boolean      @default(false)
  startedAt       DateTime     @default(now())
  endedAt         DateTime?
  durationSeconds Int?
  audioUrl        String?
  expiresAt       DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  feedback        Feedback?
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transcripts     Transcript[]

  @@index([userId])
  @@index([createdAt])
}

model Transcript {
  id         String           @id
  sessionId  String
  role       String
  content    String
  confidence Float?
  timestamp  DateTime
  expiresAt  DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  session    InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
}

model Feedback {
  id                  String           @id
  sessionId           String           @unique
  userId              String
  summary             String
  strengths           String?
  areasForImprovement String?
  fillerWordCount     Int?
  transcriptScore     Float?
  expiresAt           DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  session             InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UsageEvent {
  id         String   @id
  userId     String?
  eventType  String
  details    Json?
  occurredAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
}

enum UserRole {
  USER
  ADMIN
}

enum InterviewStatus {
  PENDING
  ACTIVE
  COMPLETED
  FAILED
  FEEDBACK_GENERATED
}
