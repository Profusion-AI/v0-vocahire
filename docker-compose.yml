# VocaHire Docker Compose Configuration
# Best practices applied based on Docker documentation

services:
  # Phase 1: Monolithic deployment
  vocahire-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
        - NODE_VERSION=20-alpine
    # Restart policy for production
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"  # Bind only to localhost for security
    environment:
      # Database
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/vocahire_dev?schema=public
      - MIGRATE_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/vocahire_dev?schema=public
      
      # Redis
      - REDIS_URL=redis://:redis_dev_password@redis:6379
      
      # Authentication
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_WEBHOOK_SECRET=${CLERK_WEBHOOK_SECRET}
      
      # Payments
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # Google Cloud
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
      
      
      # Application
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3000
    volumes:
      # Mount credentials for Google Cloud
      - ./credentials:/app/credentials:ro
      # For development, mount source code
      # - ./app:/app/app
      # - ./components:/app/components
      # - ./lib:/app/lib
      # - ./hooks:/app/hooks
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocahire-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Local PostgreSQL for development
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=vocahire_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "127.0.0.1:5432:5432"  # Bind only to localhost
    networks:
      - vocahire-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vocahire_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Local Redis for caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass redis_dev_password
    ports:
      - "127.0.0.1:6379:6379"  # Bind only to localhost
    volumes:
      - redis_data:/data
    networks:
      - vocahire-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_dev_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Future Phase 2: Frontend service (commented out for now)
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: docker/frontend/Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://api-gateway:4000
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - vocahire-network

  # Future Phase 2: API Gateway (commented out for now)
  # api-gateway:
  #   build:
  #     context: .
  #     dockerfile: docker/api-gateway/Dockerfile
  #   ports:
  #     - "4000:4000"
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/vocahire_dev?schema=public
  #     - REDIS_URL=redis://:redis_dev_password@redis:6379
  #   depends_on:
  #     - postgres
  #     - redis
  #     - ai-orchestrator
  #   networks:
  #     - vocahire-network

  # Future Phase 3: AI Orchestrator (commented out for now)
  # ai-orchestrator:
  #   build:
  #     context: .
  #     dockerfile: docker/ai-orchestrator/Dockerfile
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
  #     - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
  #   volumes:
  #     - ./credentials:/app/credentials:ro
  #   networks:
  #     - vocahire-network

networks:
  vocahire-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: