'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@clerk/nextjs';
import { Loader2 } from 'lucide-react';
import { useGenkitRealtime } from './hooks/useGenkitRealtime';
import { SessionSetup } from './components/SessionSetup';
import { LiveInterview } from './components/LiveInterview';
import { FeedbackView } from './components/FeedbackView';
import type { SessionConfig, Feedback } from '@/src/genkit/schemas/types';

type ViewState = 'setup' | 'interview' | 'feedback';

export default function InterviewV2Page() {
  const router = useRouter();
  const { user, isLoaded } = useUser();
  const [viewState, setViewState] = useState<ViewState>('setup');
  const [sessionConfig, setSessionConfig] = useState<SessionConfig | null>(null);
  const [feedback, setFeedback] = useState<Feedback | null>(null);
  
  // Initialize realtime hook with proper config
  const realtimeHook = useGenkitRealtime(
    '/api/interview-v2/session',
    sessionConfig || {
      interviewType: 'behavioral',
      domainOrRole: '',
      userId: user?.id || '',
      sessionId: '',
    },
    {
      onMessage: (data) => {
        // Handle feedback completion
        if (data.type === 'feedback' && data.data) {
          setFeedback(data.data as Feedback);
          setViewState('feedback');
        }
      },
      onError: (error) => {
        console.error('Connection error:', error);
      },
    }
  );

  // Check auth on mount
  useEffect(() => {
    if (!isLoaded) return;
    
    if (!user) {
      router.push('/login');
    }
  }, [isLoaded, user, router]);

  // Handle session setup completion
  const handleSetupComplete = (config: SessionConfig) => {
    // Add user info to config
    const fullConfig: SessionConfig = {
      ...config,
      userId: user?.id || '',
      sessionId: '', // Will be generated by backend
    };
    
    setSessionConfig(fullConfig);
    setViewState('interview');
    
    // Connect to realtime session
    realtimeHook.connect();
  };

  // Handle interview end
  const handleInterviewEnd = () => {
    // The feedback will be set via the onMessage handler
    // For now, just show a loading state
    realtimeHook.disconnect();
  };

  // Handle starting a new interview
  const handleStartNewInterview = () => {
    setSessionConfig(null);
    setFeedback(null);
    setViewState('setup');
  };

  // Loading state
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  // Auth guard
  if (!user) {
    return null;
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      {/* Header */}
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold mb-2">AI Interview Practice</h1>
        <p className="text-muted-foreground">
          Improve your interview skills with personalized AI feedback
        </p>
      </div>

      {/* Main Content */}
      <div className="min-h-[600px]">
        {viewState === 'setup' && (
          <SessionSetup 
            onComplete={handleSetupComplete}
            isLoading={realtimeHook.isConnecting}
          />
        )}
        
        {viewState === 'interview' && sessionConfig && (
          <LiveInterview
            sessionConfig={sessionConfig}
            realtimeHook={realtimeHook}
            onEnd={handleInterviewEnd}
          />
        )}
        
        {viewState === 'feedback' && feedback && (
          <FeedbackView
            feedback={feedback}
            sessionConfig={sessionConfig || undefined}
            onStartNewInterview={handleStartNewInterview}
          />
        )}
      </div>
    </div>
  );
}